"use client";

"use client";

import { useRef, useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { AnimatePresence, motion } from "framer-motion";
import Link from "next/link";
import { Progress } from "@/components/ui/progress";
import { useTranscribeStore, CinematicStage } from "@/lib/stores/useTranscribeStore";
import { useTranscribeApi } from "@/lib/hooks/useTranscribeApi";
import { FileUpload } from "@/components/transcribe/FileUpload";
import { UrlInput } from "@/components/transcribe/UrlInput";
import { TranscriptionResult } from "@/components/transcribe/TranscriptionResult";
import { AudioPlayer } from "@/components/transcribe/AudioPlayer";

export default function TranscribePage() {
  const {
    file,
    url,
    transcription,
    processedTranscription,
    audioUrl,
    isLoading,
    error,
    progress,
    progressMessage,
    cinematicStage,
    cinematicMessages,
    setFile,
    setUrl,
  } = useTranscribeStore();
  const { handleSubmit } = useTranscribeApi();
  const [showResults, setShowResults] = useState(false);
  const resultCardRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    // Only scroll when the final processed transcription is loaded and the cinematic is done
    if (processedTranscription && cinematicStage === 'DONE' && resultCardRef.current) {
      resultCardRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }, [processedTranscription, cinematicStage]);

  return (
    <div className="p-6 min-h-screen flex flex-col items-center">
      <div className={`w-full max-w-4xl ${audioUrl ? "pb-40" : ""}`}>
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl text-gray-800 dark:text-white">Transcribe Audio</h1>
          <div className="flex gap-2">
            <Link href="/history">
              <Button
                variant="ghost"
                className="rounded-full bg-gradient-to-br from-gray-100 to-gray-200 text-gray-800 hover:from-gray-200 hover:to-gray-300 dark:from-gray-800 dark:to-gray-700 dark:text-gray-100 dark:hover:from-gray-700 dark:hover:to-gray-600 shadow-sm"
                size="sm"
              >
                View History
              </Button>
            </Link>
            <Link href="/">
              <Button
                variant="ghost"
                className="rounded-full bg-gradient-to-br from-gray-100 to-gray-200 text-gray-800 hover:from-gray-200 hover:to-gray-300 dark:from-gray-800 dark:to-gray-700 dark:text-gray-100 dark:hover:from-gray-700 dark:hover:to-gray-600 shadow-sm"
                size="sm"
              >
                Dashboard
              </Button>
            </Link>
          </div>
        </div>
        <Card className="w-full">
          <CardHeader>
            <CardTitle>Upload Audio File or Provide URL</CardTitle>
          </CardHeader>
          <CardContent className="flex flex-col gap-6">
            <FileUpload file={file} onFileChange={setFile} />
            <UrlInput url={url} onUrlChange={setUrl} />
            {isLoading ? (
              <div className="flex flex-col items-center gap-2">
                 <Progress value={progress} className="w-full [&>div]:bg-blue-500" />
                 <div className="relative h-6 w-full overflow-hidden">
                    <AnimatePresence>
                      <motion.p
                        key={progressMessage}
                        initial={{ y: 20, opacity: 0 }}
                        animate={{ y: 0, opacity: 1 }}
                        exit={{ y: -20, opacity: 0 }}
                        transition={{ duration: 0.5 }}
                        className="absolute inset-0 text-sm text-muted-foreground"
                      >
                        {progressMessage}
                      </motion.p>
                    </AnimatePresence>
                  </div>
               </div>
            ) : (
              <div className="mt-6 flex justify-center">
                                 <Button
                   onClick={() => {
                     if (!file && !url) return;
                     setShowResults(true);
                     handleSubmit();
                   }}
                   disabled={!file && !url}
                   variant="ghost"
                   className="rounded-full bg-gradient-to-br from-gray-100 to-gray-200 text-gray-800 hover:from-gray-200 hover:to-gray-300 dark:from-gray-800 dark:to-gray-700 dark:text-gray-100 dark:hover:from-gray-700 dark:hover:to-gray-600 shadow-sm"
                 >
                   Transcribe
                 </Button>
              </div>
            )}
          </CardContent>
        </Card>
        <div className="w-full max-w-4xl mt-4 text-center">
          <p className="text-xs text-gray-500 dark:text-gray-400">
            Please note: This transcription is generated by an AI and may contain inaccuracies. Names and technical terms can sometimes be misinterpreted.
          </p>
        </div>
        {audioUrl && (
          <div className="my-6">
            <AudioPlayer src={audioUrl} />
          </div>
        )}
        <AnimatePresence>
          {showResults && (
            <motion.div
              key="results-card"
              initial={{ opacity: 0, y: 24 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 8 }}
              transition={{ duration: 0.35, ease: "easeOut" }}
              ref={resultCardRef}
              className="mt-4"
            >
              <TranscriptionResult />
            </motion.div>
          )}
        </AnimatePresence>
        
      </div>
    </div>
  );
}